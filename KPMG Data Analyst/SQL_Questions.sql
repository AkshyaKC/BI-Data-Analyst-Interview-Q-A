-- 1. Write a query to calculate the total revenue generated by each region.
;
CREATE TABLE revenue_table(revenue DECIMAL(10, 2), region VARCHAR(20));
INSERT INTO revenue_table ()
VALUES (1000.50, 'East'),
    (750.25, 'West'),
    (1200.75, 'South'),
    (950.00, 'East'),
    (1100.40, 'West'),
    (800.60, 'South'),
    (1150.85, 'East'),
    (700.30, 'West'),
    (1250.10, 'South'),
    (900.95, 'East'),
    (1050.65, 'West'),
    (850.45, 'South'),
    (1300.90, 'East'),
    (780.55, 'West'),
    (1400.75, 'South');
SELECT region,
    SUM(revenue) AS TotalRevenue
FROM revenue_table
GROUP BY region
ORDER BY 2 DESC;
-- 2. Display the names of employees earning a salary higher than the average salary in their department.
;
CREATE TABLE employee_salary(
    empID INT,
    empName VARCHAR(50),
    salary DECIMAL(10, 2),
    department VARCHAR(50)
);
INSERT INTO employee_salary ()
VALUES (1, 'John Doe', 60000.00, 'Finance'),
    (2, 'Jane Smith', 70000.00, 'IT'),
    (3, 'Michael Brown', 55000.00, 'Admin'),
    (4, 'Emily Davis', 62000.00, 'Finance'),
    (5, 'William Johnson', 75000.00, 'IT'),
    (6, 'Jessica Taylor', 50000.00, 'Admin'),
    (7, 'David Wilson', 58000.00, 'Finance'),
    (8, 'Sarah Thomas', 68000.00, 'IT'),
    (9, 'Christopher Harris', 52000.00, 'Admin'),
    (10, 'Laura Martinez', 64000.00, 'Finance'),
    (11, 'Daniel Moore', 77000.00, 'IT'),
    (12, 'Sophia Jackson', 51000.00, 'Admin'),
    (13, 'James White', 59000.00, 'Finance'),
    (14, 'Olivia Martin', 73000.00, 'IT'),
    (15, 'Anthony Anderson', 53000.00, 'Admin'),
    (16, 'Emma Thompson', 61000.00, 'Finance'),
    (17, 'Matthew Clark', 72000.00, 'IT'),
    (18, 'Isabella Lewis', 54000.00, 'Admin'),
    (19, 'Ethan Hall', 63000.00, 'Finance'),
    (20, 'Mia Young', 76000.00, 'IT');
WITH Dept_Average AS(
    SELECT empName,
        salary,
        department,
        AVG(salary) OVER(PARTITION BY department) AS DepartmentAvgSalary
    FROM employee_salary
)
SELECT empName,
    salary,
    department,
    DepartmentAvgSalary
FROM Dept_Average
WHERE salary > DepartmentAvgSalary;
-- 3. Identify the second - highest salary in each department from the ‘ employees ’ table, which contains ‘ emp_id,’ ‘ department_id,’
--    and ‘ salary ’ columns.
;
WITH salary_rank_by_dept AS(
    SELECT department,
        salary,
        ROW_NUMBER() OVER(
            PARTITION BY department
            ORDER BY salary desc
        ) AS SalaryRank
    FROM employee_salary
)
SELECT department,
    salary AS SecondHighestSalary
FROM salary_rank_by_dept
WHERE SalaryRank = 2;
-- 4. Write a SQL query to find employees who haven ’ t made any recent sales in the last 3 months.
;
CREATE TABLE sales_data(
    empName VARCHAR(20),
    saleQuantity INT,
    saleDate DATE
);
INSERT INTO sales_data()
VALUES ('Jane Smith', 8, '2022-11-25'),
    ('Emily Davis', 4, '2022-11-30'),
    ('Michael Brown', 1, '2022-12-01'),
    ('John Doe', 5, '2023-02-15'),
    ('Emily Davis', 2, '2023-03-10'),
    ('Jane Smith', 4, '2023-03-12'),
    ('Michael Brown', 3, '2023-04-08'),
    ('Michael Brown', 5, '2023-05-25'),
    ('Emily Davis', 3, '2023-06-01'),
    ('John Doe', 3, '2023-06-10'),
    ('Michael Brown', 7, '2023-07-15'),
    ('Jane Smith', 2, '2024-09-28'),
    ('John Doe', 6, '2024-09-28'),
    ('Jane Smith', 6, '2024-10-01'),
    ('John Doe', 7, '2024-10-02');
WITH latest_sale AS(
    SELECT empName,
        MAX(saleDate) AS LatestSaleOn
    FROM sales_data
    GROUP BY empName
)
SELECT *
FROM latest_sale
WHERE LatestSaleOn > CURRENT_DATE - INTERVAL 3 MONTH;